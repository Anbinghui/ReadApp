package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.jxkj.readapp.bean.CollectionBookBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION_BOOK_BEAN".
*/
public class CollectionBookBeanDao extends AbstractDao<CollectionBookBean, Void> {

    public static final String TABLENAME = "COLLECTION_BOOK_BEAN";

    /**
     * Properties of entity CollectionBookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", false, "_ID");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property Cover = new Property(2, String.class, "cover", false, "COVER");
        public final static Property ShortIntro = new Property(3, String.class, "shortIntro", false, "SHORT_INTRO");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property HasCp = new Property(5, boolean.class, "hasCp", false, "HAS_CP");
        public final static Property IsTop = new Property(6, boolean.class, "isTop", false, "IS_TOP");
        public final static Property IsSeleted = new Property(7, boolean.class, "isSeleted", false, "IS_SELETED");
        public final static Property ShowCheckBox = new Property(8, boolean.class, "showCheckBox", false, "SHOW_CHECK_BOX");
        public final static Property IsFromSD = new Property(9, boolean.class, "isFromSD", false, "IS_FROM_SD");
        public final static Property Path = new Property(10, String.class, "path", false, "PATH");
        public final static Property LatelyFollower = new Property(11, int.class, "latelyFollower", false, "LATELY_FOLLOWER");
        public final static Property RetentionRatio = new Property(12, double.class, "retentionRatio", false, "RETENTION_RATIO");
        public final static Property Updated = new Property(13, String.class, "updated", false, "UPDATED");
        public final static Property ChaptersCount = new Property(14, int.class, "chaptersCount", false, "CHAPTERS_COUNT");
        public final static Property LastChapter = new Property(15, String.class, "lastChapter", false, "LAST_CHAPTER");
        public final static Property RecentReadingTime = new Property(16, String.class, "recentReadingTime", false, "RECENT_READING_TIME");
        public final static Property Encoding = new Property(17, String.class, "encoding", false, "ENCODING");
    }


    public CollectionBookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionBookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_BOOK_BEAN\" (" + //
                "\"_ID\" TEXT," + // 0: _id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"COVER\" TEXT," + // 2: cover
                "\"SHORT_INTRO\" TEXT," + // 3: shortIntro
                "\"TITLE\" TEXT," + // 4: title
                "\"HAS_CP\" INTEGER NOT NULL ," + // 5: hasCp
                "\"IS_TOP\" INTEGER NOT NULL ," + // 6: isTop
                "\"IS_SELETED\" INTEGER NOT NULL ," + // 7: isSeleted
                "\"SHOW_CHECK_BOX\" INTEGER NOT NULL ," + // 8: showCheckBox
                "\"IS_FROM_SD\" INTEGER NOT NULL ," + // 9: isFromSD
                "\"PATH\" TEXT," + // 10: path
                "\"LATELY_FOLLOWER\" INTEGER NOT NULL ," + // 11: latelyFollower
                "\"RETENTION_RATIO\" REAL NOT NULL ," + // 12: retentionRatio
                "\"UPDATED\" TEXT," + // 13: updated
                "\"CHAPTERS_COUNT\" INTEGER NOT NULL ," + // 14: chaptersCount
                "\"LAST_CHAPTER\" TEXT," + // 15: lastChapter
                "\"RECENT_READING_TIME\" TEXT," + // 16: recentReadingTime
                "\"ENCODING\" TEXT);"); // 17: encoding
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectionBookBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(3, cover);
        }
 
        String shortIntro = entity.getShortIntro();
        if (shortIntro != null) {
            stmt.bindString(4, shortIntro);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindLong(6, entity.getHasCp() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsTop() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsSeleted() ? 1L: 0L);
        stmt.bindLong(9, entity.getShowCheckBox() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsFromSD() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(11, path);
        }
        stmt.bindLong(12, entity.getLatelyFollower());
        stmt.bindDouble(13, entity.getRetentionRatio());
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(14, updated);
        }
        stmt.bindLong(15, entity.getChaptersCount());
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(16, lastChapter);
        }
 
        String recentReadingTime = entity.getRecentReadingTime();
        if (recentReadingTime != null) {
            stmt.bindString(17, recentReadingTime);
        }
 
        String encoding = entity.getEncoding();
        if (encoding != null) {
            stmt.bindString(18, encoding);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectionBookBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(3, cover);
        }
 
        String shortIntro = entity.getShortIntro();
        if (shortIntro != null) {
            stmt.bindString(4, shortIntro);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
        stmt.bindLong(6, entity.getHasCp() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsTop() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsSeleted() ? 1L: 0L);
        stmt.bindLong(9, entity.getShowCheckBox() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsFromSD() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(11, path);
        }
        stmt.bindLong(12, entity.getLatelyFollower());
        stmt.bindDouble(13, entity.getRetentionRatio());
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(14, updated);
        }
        stmt.bindLong(15, entity.getChaptersCount());
 
        String lastChapter = entity.getLastChapter();
        if (lastChapter != null) {
            stmt.bindString(16, lastChapter);
        }
 
        String recentReadingTime = entity.getRecentReadingTime();
        if (recentReadingTime != null) {
            stmt.bindString(17, recentReadingTime);
        }
 
        String encoding = entity.getEncoding();
        if (encoding != null) {
            stmt.bindString(18, encoding);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CollectionBookBean readEntity(Cursor cursor, int offset) {
        CollectionBookBean entity = new CollectionBookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cover
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortIntro
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.getShort(offset + 5) != 0, // hasCp
            cursor.getShort(offset + 6) != 0, // isTop
            cursor.getShort(offset + 7) != 0, // isSeleted
            cursor.getShort(offset + 8) != 0, // showCheckBox
            cursor.getShort(offset + 9) != 0, // isFromSD
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // path
            cursor.getInt(offset + 11), // latelyFollower
            cursor.getDouble(offset + 12), // retentionRatio
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // updated
            cursor.getInt(offset + 14), // chaptersCount
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // lastChapter
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // recentReadingTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // encoding
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectionBookBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCover(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortIntro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHasCp(cursor.getShort(offset + 5) != 0);
        entity.setIsTop(cursor.getShort(offset + 6) != 0);
        entity.setIsSeleted(cursor.getShort(offset + 7) != 0);
        entity.setShowCheckBox(cursor.getShort(offset + 8) != 0);
        entity.setIsFromSD(cursor.getShort(offset + 9) != 0);
        entity.setPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLatelyFollower(cursor.getInt(offset + 11));
        entity.setRetentionRatio(cursor.getDouble(offset + 12));
        entity.setUpdated(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setChaptersCount(cursor.getInt(offset + 14));
        entity.setLastChapter(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRecentReadingTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setEncoding(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CollectionBookBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CollectionBookBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(CollectionBookBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
