package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jxkj.readapp.ioc.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Desc = new Property(1, String.class, "desc", false, "DESC");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Member_nickname = new Property(3, String.class, "member_nickname", false, "MEMBER_NICKNAME");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Headportraits = new Property(5, String.class, "headportraits", false, "HEADPORTRAITS");
        public final static Property Member_id = new Property(6, String.class, "member_id", false, "MEMBER_ID");
        public final static Property Uid = new Property(7, String.class, "uid", false, "UID");
        public final static Property Longitude = new Property(8, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(9, double.class, "latitude", false, "LATITUDE");
        public final static Property Isagent = new Property(10, Boolean.class, "isagent", false, "ISAGENT");
        public final static Property Sel_id = new Property(11, String.class, "sel_id", false, "SEL_ID");
        public final static Property Sel_password = new Property(12, String.class, "sel_password", false, "SEL_PASSWORD");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DESC\" TEXT," + // 1: desc
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"MEMBER_NICKNAME\" TEXT," + // 3: member_nickname
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"HEADPORTRAITS\" TEXT," + // 5: headportraits
                "\"MEMBER_ID\" TEXT," + // 6: member_id
                "\"UID\" TEXT," + // 7: uid
                "\"LONGITUDE\" REAL NOT NULL ," + // 8: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 9: latitude
                "\"ISAGENT\" INTEGER," + // 10: isagent
                "\"SEL_ID\" TEXT," + // 11: sel_id
                "\"SEL_PASSWORD\" TEXT);"); // 12: sel_password
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_INFO_DESC_MOBILE_DESC ON USER_INFO" +
                " (\"DESC\" ASC,\"MOBILE\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String member_nickname = entity.getMember_nickname();
        if (member_nickname != null) {
            stmt.bindString(4, member_nickname);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String headportraits = entity.getHeadportraits();
        if (headportraits != null) {
            stmt.bindString(6, headportraits);
        }
 
        String member_id = entity.getMember_id();
        if (member_id != null) {
            stmt.bindString(7, member_id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(8, uid);
        }
        stmt.bindDouble(9, entity.getLongitude());
        stmt.bindDouble(10, entity.getLatitude());
 
        Boolean isagent = entity.getIsagent();
        if (isagent != null) {
            stmt.bindLong(11, isagent ? 1L: 0L);
        }
 
        String sel_id = entity.getSel_id();
        if (sel_id != null) {
            stmt.bindString(12, sel_id);
        }
 
        String sel_password = entity.getSel_password();
        if (sel_password != null) {
            stmt.bindString(13, sel_password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String member_nickname = entity.getMember_nickname();
        if (member_nickname != null) {
            stmt.bindString(4, member_nickname);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String headportraits = entity.getHeadportraits();
        if (headportraits != null) {
            stmt.bindString(6, headportraits);
        }
 
        String member_id = entity.getMember_id();
        if (member_id != null) {
            stmt.bindString(7, member_id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(8, uid);
        }
        stmt.bindDouble(9, entity.getLongitude());
        stmt.bindDouble(10, entity.getLatitude());
 
        Boolean isagent = entity.getIsagent();
        if (isagent != null) {
            stmt.bindLong(11, isagent ? 1L: 0L);
        }
 
        String sel_id = entity.getSel_id();
        if (sel_id != null) {
            stmt.bindString(12, sel_id);
        }
 
        String sel_password = entity.getSel_password();
        if (sel_password != null) {
            stmt.bindString(13, sel_password);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // desc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // member_nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headportraits
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // member_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uid
            cursor.getDouble(offset + 8), // longitude
            cursor.getDouble(offset + 9), // latitude
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isagent
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sel_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // sel_password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMember_nickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadportraits(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMember_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLongitude(cursor.getDouble(offset + 8));
        entity.setLatitude(cursor.getDouble(offset + 9));
        entity.setIsagent(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setSel_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSel_password(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
